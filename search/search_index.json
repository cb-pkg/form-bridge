{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Installation Create a .npmrc file in your project alongside package.json with following connect. .npmrc 1 @cb-pkg : registry=https://npm.pkg.github.com Install form-bridge package: 1 npm install @cb-pkg/form-bridge react-hook-form --save You can optionally also install devtools: 1 npm install @hookform/devtools --save-dev Usage Typescript Javascript Login.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import { Form , Controller } from '@cb-pkg/form-bridge' ; import { TextField , Button } from '@mui/material' ; import Axios from 'axios' ; import { drfErrorsAdaptor } from '@cb-pkg/form-bridge/adaptors/django' ; import { TextFieldPropsAdaptor } from '@cb-pkg/form-bridge/adaptors/mui' ; function Login () { return ( < Form action = \"/api/login\" onSubmit = {( data , { method , action }) => Axios ( action , { method , data })} apiErrorAdaptor = { drfErrorsAdaptor } onSubmitSuccess = {( res : any ) => { localStorage . setItem ( 'accessToken' , res . data . accessToken ); navigate ( '/' ); }} > < Controller as = { TextField } defaultValue = \"\" label = \"Email\" name = \"email\" pattern = \"email\" propsAdaptor = { TextFieldPropsAdaptor } required /> < Controller as = { TextField } defaultValue = \"\" label = \"Password\" name = \"email\" propsAdaptor = { TextFieldPropsAdaptor } required /> < Button type = \"submit\" > Login < /Button> < /Form> ); } Login.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import { Form , Controller } from '@cb-pkg/form-bridge' ; import { TextField , Button } from '@mui/material' ; import Axios from 'axios' ; import { drfErrorsAdaptor } from '@cb-pkg/form-bridge/adaptors/django' ; import { TextFieldPropsAdaptor } from '@cb-pkg/form-bridge/adaptors/mui' ; function Login () { return ( < Form action = \"/api/login\" onSubmit = {( data , { method , action }) => Axios ( action , { method , data })} apiErrorAdaptor = { drfErrorsAdaptor } onSubmitSuccess = {( res ) => { localStorage . setItem ( 'accessToken' , res . data . accessToken ); navigate ( '/' ); }} > < Controller as = { TextField } defaultValue = \"\" label = \"Email\" name = \"email\" pattern = \"email\" propsAdaptor = { TextFieldPropsAdaptor } required /> < Controller as = { TextField } defaultValue = \"\" label = \"Password\" name = \"email\" propsAdaptor = { TextFieldPropsAdaptor } required /> < Button type = \"submit\" > Login < /Button> < /Form> ); } As you can see that some props here will become very redundant when multiple instances of form will be used. This redundancy can be removed by moving redundant props to global FormConfig . See it in next section.","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#installation","text":"Create a .npmrc file in your project alongside package.json with following connect. .npmrc 1 @cb-pkg : registry=https://npm.pkg.github.com Install form-bridge package: 1 npm install @cb-pkg/form-bridge react-hook-form --save You can optionally also install devtools: 1 npm install @hookform/devtools --save-dev","title":"Installation"},{"location":"#usage","text":"Typescript Javascript Login.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import { Form , Controller } from '@cb-pkg/form-bridge' ; import { TextField , Button } from '@mui/material' ; import Axios from 'axios' ; import { drfErrorsAdaptor } from '@cb-pkg/form-bridge/adaptors/django' ; import { TextFieldPropsAdaptor } from '@cb-pkg/form-bridge/adaptors/mui' ; function Login () { return ( < Form action = \"/api/login\" onSubmit = {( data , { method , action }) => Axios ( action , { method , data })} apiErrorAdaptor = { drfErrorsAdaptor } onSubmitSuccess = {( res : any ) => { localStorage . setItem ( 'accessToken' , res . data . accessToken ); navigate ( '/' ); }} > < Controller as = { TextField } defaultValue = \"\" label = \"Email\" name = \"email\" pattern = \"email\" propsAdaptor = { TextFieldPropsAdaptor } required /> < Controller as = { TextField } defaultValue = \"\" label = \"Password\" name = \"email\" propsAdaptor = { TextFieldPropsAdaptor } required /> < Button type = \"submit\" > Login < /Button> < /Form> ); } Login.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import { Form , Controller } from '@cb-pkg/form-bridge' ; import { TextField , Button } from '@mui/material' ; import Axios from 'axios' ; import { drfErrorsAdaptor } from '@cb-pkg/form-bridge/adaptors/django' ; import { TextFieldPropsAdaptor } from '@cb-pkg/form-bridge/adaptors/mui' ; function Login () { return ( < Form action = \"/api/login\" onSubmit = {( data , { method , action }) => Axios ( action , { method , data })} apiErrorAdaptor = { drfErrorsAdaptor } onSubmitSuccess = {( res ) => { localStorage . setItem ( 'accessToken' , res . data . accessToken ); navigate ( '/' ); }} > < Controller as = { TextField } defaultValue = \"\" label = \"Email\" name = \"email\" pattern = \"email\" propsAdaptor = { TextFieldPropsAdaptor } required /> < Controller as = { TextField } defaultValue = \"\" label = \"Password\" name = \"email\" propsAdaptor = { TextFieldPropsAdaptor } required /> < Button type = \"submit\" > Login < /Button> < /Form> ); } As you can see that some props here will become very redundant when multiple instances of form will be used. This redundancy can be removed by moving redundant props to global FormConfig . See it in next section.","title":"Usage"},{"location":"getting_started/","text":"Getting Started All the redundant props in a form can be moved to global config to make final usage as simple as possible. Here we extracted form submission logic, api errors adaptor from Form to this global config. Also, we can specify Controller propsAdaptors for different components at global config level. Typescript Javascript formConfig.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import { Rating , TextField } from '@mui/material' ; import type { FormConfigType } from '@cb-pkg/react-forms' ; import { drfErrorsAdaptor } from '@cb-pkg/react-forms/adaptors/django' ; import { TextFieldPropsAdaptor , RatingPropsAdaptor } from '@cb-pkg/react-forms/adaptors/mui' ; import Axios from 'axios' ; export default { components : { Form : { defaultProps : { onSubmit : ( data , { method , action }, e ) => ( Axios ( action , { method , data }) ), apiErrorAdaptor : drfErrorsAdaptor , enableDevtools : true , // (1)! } }, Controller : { propsAdapters : [ { component : TextField , adaptor : TextFieldPropsAdaptor , }, { component : Rating , adaptor : RatingPropsAdaptor , }, ], }, } } as FormConfigType ; If you wan to enable devtools for all the forms. It also requires @hookform/devtools to be installed. formConfig.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import { Rating , TextField } from '@mui/material' ; import { drfErrorsAdaptor } from '@cb-pkg/react-forms/adaptors/django' ; import { TextFieldPropsAdaptor , RatingPropsAdaptor } from '@cb-pkg/react-forms/adaptors/mui' ; import Axios from 'axios' ; export default { components : { Form : { defaultProps : { onSubmit : ( data , { method , action }, e ) => ( Axios ( action , { method , data }) ), apiErrorAdaptor : drfErrorsAdaptor , enableDevtools : true , // (1)! } }, Controller : { propsAdapters : [ { component : TextField , adaptor : TextFieldPropsAdaptor , }, { component : Rating , adaptor : RatingPropsAdaptor , }, ], }, } }; If you wan to enable devtools for all the forms. It also requires @hookform/devtools to be installed. Now we need to provide the form config at the root of app so it can be accessed anywhere is the application. Typescript Javascript main.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { FormConfig } from '@cb-pkg/react-forms' ; import formConfig from './formConfig' ; // ...other imports and code ReactDOM . createRoot ( document . getElementById ( 'root' )). render ( < React . StrictMode > < FormConfig config = { formConfig }> < ThemeProvider theme = { theme }> < CssBaseline /> < App /> </ ThemeProvider > </ FormConfig > </ React . StrictMode >, ); main.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { FormConfig } from '@cb-pkg/react-forms' ; import formConfig from './formConfig' ; // ...other imports and code ReactDOM . createRoot ( document . getElementById ( 'root' )). render ( < React . StrictMode > < FormConfig config = { formConfig }> < ThemeProvider theme = { theme }> < CssBaseline /> < App /> </ ThemeProvider > </ FormConfig > </ React . StrictMode >, ); Finally, we can use Form component and witness the magic happening. Typescript Javascript Login.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import React from 'react' ; import { Controller , Form } from '@cb-pkg/react-forms' ; import { Button , TextField } from '@mui/material' ; import { useNavigate } from 'react-router-dom' ; export default function Login () { const navigate = useNavigate (); return ( < Form action = \"/api/login\" onSubmitSuccess = {( res : any ) => { localStorage . setItem ( 'accessToken' , res . data . accessToken ); navigate ( '/' ); }} > < Controller as = { TextField } name = 'email' label = 'Email' pattern = 'email' required /> < Controller as = { TextField } name = 'password' label = 'Password' required /> < Button type = 'submit' variant = 'contained' > Login </ Button > </ Form > ); } Login.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import React from 'react' ; import { Controller , Form } from '@cb-pkg/react-forms' ; import { Button , TextField } from '@mui/material' ; import { useNavigate } from 'react-router-dom' ; export default function Login () { const navigate = useNavigate (); return ( < Form action = \"/api/login\" onSubmitSuccess = {( res ) => { localStorage . setItem ( 'accessToken' , res . data . accessToken ); navigate ( '/' ); }} > < Controller as = { TextField } name = 'email' label = 'Email' pattern = 'email' required /> < Controller as = { TextField } name = 'password' label = 'Password' required /> < Button type = 'submit' variant = 'contained' > Login </ Button > </ Form > ); }","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"All the redundant props in a form can be moved to global config to make final usage as simple as possible. Here we extracted form submission logic, api errors adaptor from Form to this global config. Also, we can specify Controller propsAdaptors for different components at global config level. Typescript Javascript formConfig.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import { Rating , TextField } from '@mui/material' ; import type { FormConfigType } from '@cb-pkg/react-forms' ; import { drfErrorsAdaptor } from '@cb-pkg/react-forms/adaptors/django' ; import { TextFieldPropsAdaptor , RatingPropsAdaptor } from '@cb-pkg/react-forms/adaptors/mui' ; import Axios from 'axios' ; export default { components : { Form : { defaultProps : { onSubmit : ( data , { method , action }, e ) => ( Axios ( action , { method , data }) ), apiErrorAdaptor : drfErrorsAdaptor , enableDevtools : true , // (1)! } }, Controller : { propsAdapters : [ { component : TextField , adaptor : TextFieldPropsAdaptor , }, { component : Rating , adaptor : RatingPropsAdaptor , }, ], }, } } as FormConfigType ; If you wan to enable devtools for all the forms. It also requires @hookform/devtools to be installed. formConfig.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import { Rating , TextField } from '@mui/material' ; import { drfErrorsAdaptor } from '@cb-pkg/react-forms/adaptors/django' ; import { TextFieldPropsAdaptor , RatingPropsAdaptor } from '@cb-pkg/react-forms/adaptors/mui' ; import Axios from 'axios' ; export default { components : { Form : { defaultProps : { onSubmit : ( data , { method , action }, e ) => ( Axios ( action , { method , data }) ), apiErrorAdaptor : drfErrorsAdaptor , enableDevtools : true , // (1)! } }, Controller : { propsAdapters : [ { component : TextField , adaptor : TextFieldPropsAdaptor , }, { component : Rating , adaptor : RatingPropsAdaptor , }, ], }, } }; If you wan to enable devtools for all the forms. It also requires @hookform/devtools to be installed. Now we need to provide the form config at the root of app so it can be accessed anywhere is the application. Typescript Javascript main.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { FormConfig } from '@cb-pkg/react-forms' ; import formConfig from './formConfig' ; // ...other imports and code ReactDOM . createRoot ( document . getElementById ( 'root' )). render ( < React . StrictMode > < FormConfig config = { formConfig }> < ThemeProvider theme = { theme }> < CssBaseline /> < App /> </ ThemeProvider > </ FormConfig > </ React . StrictMode >, ); main.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { FormConfig } from '@cb-pkg/react-forms' ; import formConfig from './formConfig' ; // ...other imports and code ReactDOM . createRoot ( document . getElementById ( 'root' )). render ( < React . StrictMode > < FormConfig config = { formConfig }> < ThemeProvider theme = { theme }> < CssBaseline /> < App /> </ ThemeProvider > </ FormConfig > </ React . StrictMode >, ); Finally, we can use Form component and witness the magic happening. Typescript Javascript Login.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import React from 'react' ; import { Controller , Form } from '@cb-pkg/react-forms' ; import { Button , TextField } from '@mui/material' ; import { useNavigate } from 'react-router-dom' ; export default function Login () { const navigate = useNavigate (); return ( < Form action = \"/api/login\" onSubmitSuccess = {( res : any ) => { localStorage . setItem ( 'accessToken' , res . data . accessToken ); navigate ( '/' ); }} > < Controller as = { TextField } name = 'email' label = 'Email' pattern = 'email' required /> < Controller as = { TextField } name = 'password' label = 'Password' required /> < Button type = 'submit' variant = 'contained' > Login </ Button > </ Form > ); } Login.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import React from 'react' ; import { Controller , Form } from '@cb-pkg/react-forms' ; import { Button , TextField } from '@mui/material' ; import { useNavigate } from 'react-router-dom' ; export default function Login () { const navigate = useNavigate (); return ( < Form action = \"/api/login\" onSubmitSuccess = {( res ) => { localStorage . setItem ( 'accessToken' , res . data . accessToken ); navigate ( '/' ); }} > < Controller as = { TextField } name = 'email' label = 'Email' pattern = 'email' required /> < Controller as = { TextField } name = 'password' label = 'Password' required /> < Button type = 'submit' variant = 'contained' > Login </ Button > </ Form > ); }","title":"Getting Started"},{"location":"api_reference/controller/","text":"","title":"Controller"},{"location":"api_reference/field_array/","text":"","title":"Field array"},{"location":"api_reference/form/","text":"","title":"Form"},{"location":"api_reference/form_config/","text":"","title":"Form config"},{"location":"api_reference/form_field/","text":"","title":"Form field"},{"location":"api_reference/postable_form/","text":"","title":"Postable form"},{"location":"api_reference/watch_field_state/","text":"","title":"Watch field state"},{"location":"api_reference/watch_form_state/","text":"","title":"Watch form state"},{"location":"api_reference/adaptors/","text":"Adaptors","title":"Adaptors"},{"location":"api_reference/adaptors/#adaptors","text":"","title":"Adaptors"},{"location":"api_reference/adaptors/MUI/","text":"","title":"MUI"},{"location":"api_reference/adaptors/django/","text":"","title":"Django"}]}